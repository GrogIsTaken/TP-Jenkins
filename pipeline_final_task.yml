pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'Git branch to build')
        choice(name: 'ENV', choices: ['dev', 'staging', 'prod'], description: 'Deployment environment')
        booleanParam(name: 'RUN_TESTS', defaultValue: true, description: 'Run tests before deployment?')
    }

    stages {
        stage('Initialize') {
            steps {
                echo 'Initializing pipeline for Make Your Wishes Come True project...'
                bat 'mkdir build\\reports' // Updated for Windows compatibility
            }
        }

        stage('Checkout Code') {
            steps {
                echo "Checking out code from branch: ${params.BRANCH}"
                git branch: params.BRANCH, url: 'https://github.com/GrogIsTaken/TP-Jenkins.git' // Updated URL to repository root
            }
        }

        stage('Install Dependencies') {
            steps {
                echo 'Installing project dependencies...'
                bat 'npm install' // Updated for Windows compatibility
            }
        }

        stage('Run Tests') {
            when {
                expression { params.RUN_TESTS }
            }
            steps {
                echo 'Running tests...'
                bat 'npm test' // Updated for Windows compatibility
                junit '**/test-results/*.xml' // Collect test results
            }
        }

        stage('Build') {
            steps {
                echo 'Building the application...'
                bat 'npm run build' // Updated for Windows compatibility
                archiveArtifacts artifacts: '**/build/**', fingerprint: true
            }
        }

        stage('Deploy') {
            steps {
                echo "Deploying to environment: ${params.ENV}"
                bat "deploy.bat ${params.ENV}" // Updated for Windows compatibility
            }
        }

        stage('Post-Deployment Checks') {
            steps {
                echo 'Running post-deployment checks...'
                bat 'post-deploy-checks.bat' // Updated for Windows compatibility
            }
        }
    }

    post {
        always {
            echo 'Pipeline execution completed.'
        }
        success {
            echo 'Pipeline executed successfully!'
        }
        failure {
            echo 'Pipeline failed! Investigating issues...'
        }
    }
}
